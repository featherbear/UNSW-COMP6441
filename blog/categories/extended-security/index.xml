<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extended Security on COMP6441 Musings</title>
    <link>/categories/extended-security/</link>
    <description>Recent content in Extended Security on COMP6441 Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Andrew Wong (z5206677)</copyright>
    <lastBuildDate>Tue, 16 Jul 2019 18:46:41 +1000</lastBuildDate>
    
	<atom:link href="/categories/extended-security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pentesting</title>
      <link>/post/pentesting/</link>
      <pubDate>Tue, 16 Jul 2019 18:46:41 +1000</pubDate>
      
      <guid>/post/pentesting/</guid>
      <description>Pentesting is short for Penetration Testing.</description>
    </item>
    
    <item>
      <title>Bug Bounties</title>
      <link>/post/bug-bounties/</link>
      <pubDate>Tue, 16 Jul 2019 18:16:18 +1000</pubDate>
      
      <guid>/post/bug-bounties/</guid>
      <description>A bug is a flaw in a program code that could possibly lead to security issues.</description>
    </item>
    
    <item>
      <title>Buffer Overflow - 3</title>
      <link>/post/buffer-overflow-03/</link>
      <pubDate>Fri, 12 Jul 2019 03:16:59 +1000</pubDate>
      
      <guid>/post/buffer-overflow-03/</guid>
      <description>This time the code is hidden</description>
    </item>
    
    <item>
      <title>Buffer Overflow - 2</title>
      <link>/post/buffer-overflow-02/</link>
      <pubDate>Fri, 12 Jul 2019 03:00:39 +1000</pubDate>
      
      <guid>/post/buffer-overflow-02/</guid>
      <description>Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Buffer Overflow - 1</title>
      <link>/post/buffer-overflow-01/</link>
      <pubDate>Thu, 11 Jul 2019 16:03:30 +1000</pubDate>
      
      <guid>/post/buffer-overflow-01/</guid>
      <description>The nice course tutors decided to provide us some programs vulnerable to buffer overflow attacks - so let&amp;rsquo;s have a play with them!</description>
    </item>
    
    <item>
      <title>What&#39;s Wrong With the Code - 03</title>
      <link>/post/whats-wrong-with-the-code-03/</link>
      <pubDate>Mon, 01 Jul 2019 16:18:46 +1000</pubDate>
      
      <guid>/post/whats-wrong-with-the-code-03/</guid>
      <description>1 2 3 4 5 6 7 8  unsigned short int f; char mybuf[1024]; char* userstr = getuserstr(); f = strlen(userstr); if (f &amp;gt; sizeof(mybuf)-5) die(&amp;#34;string too long!</description>
    </item>
    
    <item>
      <title>What&#39;s Wrong With the Code - 02</title>
      <link>/post/whats-wrong-with-the-code-02/</link>
      <pubDate>Mon, 01 Jul 2019 16:18:45 +1000</pubDate>
      
      <guid>/post/whats-wrong-with-the-code-02/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  char *read_username(int sockfd) { char *buffer, *style, userstring[1024]; int i; buffer = (char*) malloc(1024); if (!</description>
    </item>
    
    <item>
      <title>What&#39;s Wrong With the Code - 01</title>
      <link>/post/whats-wrong-with-the-code-01/</link>
      <pubDate>Mon, 01 Jul 2019 16:18:44 +1000</pubDate>
      
      <guid>/post/whats-wrong-with-the-code-01/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  int read_data(int sockfd) { char buf[1024]; unsigned short max = sizeof(buf); short length; length = get_network_short(sockfd); if (length &amp;gt; max) { error(&amp;#34;bad length: %d\n&amp;#34;, length); return 1; } if(read(sockfd, buf, length) &amp;lt; 0){ error(&amp;#34;read: %m&amp;#34;); return 1; } .</description>
    </item>
    
    <item>
      <title>Social Engineering</title>
      <link>/post/social-engineering/</link>
      <pubDate>Tue, 25 Jun 2019 18:06:26 +1000</pubDate>
      
      <guid>/post/social-engineering/</guid>
      <description>What is social engineering  The art of learning and lying Targets both physical and digital security Psychological attack Phishing, ransomware, baiting  Stage 1) Investigation/Recon</description>
    </item>
    
    <item>
      <title>Attacking Locks</title>
      <link>/post/attacking-locks/</link>
      <pubDate>Tue, 18 Jun 2019 18:00:00 +1000</pubDate>
      
      <guid>/post/attacking-locks/</guid>
      <description>This week (week 3) during the evening lecture, one of the extended security workshop groups presented a talk about lock picking!</description>
    </item>
    
  </channel>
</rss>